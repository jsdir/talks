Thoughts on Deployment
  #+begin_src bash
  $ cat userdata/$(whoami).json
  {
    "name": "Jason Sommer",
    "email": "j@jsdir.net",
    "phone": 8325106718,
    "github": "github.com/jsdir",
    "twitter": "@jsdir"
  }
  #+end_src
* Fuctional Software

  Parts of functional software:

  - development
    - languages
    - testing

* Functional Software

  - deployment
    - static or dynamic linking
    - builds
    - CD
    - environments
    - dependencies
    - versioning schemes

  Both parts are symbiotic.

* Deployment is important

  More documentation is written about developing correct code over deploying code correctly.

  - deployment practices are not as standardized as coding practices
  - illustration time

* (T/F) It's okay to repeat certain similar logical operations in multiple places throughout the code. The senior dev will refactor it anyway.

* (T/F) A web application and the JS web client it serves should be live in the same repository.

* (T/F) Now the web application is served by CDN instead of the web server. Same answer?

* A Solution

  - for my own questions
  - 12factor is a set of best practices ([[12factor.net]])
  - but it is only supposed to be used for only one codebase
  - it considers anything more than that to be a distributed system
  - most of us are running distributed systems rather than singular apps

* A Scenario

  - starting out
  - server and client in one repository
  - changes
  - push
  - problem? rollback to last working commit or container image

* Confusion

  - devs start getting confused
  - decision: the web application is a separate service from the web server
  - split the repos

* New problem

  - changes
  - push
  - problem? what to rollback to?
  - how do we know the state of the distributed system n seconds ago?
  - we did't know when we ran a distributed system
  - there's no recorded state of what worked when
  - this gets scary for rollbacks

* These problems are inevitable for distributed systems unless we use tools to help

* Git submodules? >_>

* Idea: The twelve-factor +app+ distributed system

  As the twelve-factor app views the release of the app (service) as a collection of versioned dependencies, the twelve-factor distributed system views the release of the distributed system as a collection of versioned apps (services).

  - back to 12factor

* What does it mean?

  {
    "web-app": "1.0.1a",
    "web-server": "0.3.2",
    "chat-server": "0.4.1",
    "video-transcoder": "1.2.1"
  }

  This is the distributed system's state:
  a collection of versioned apps (services).

* The release

  A distributed system release is a collection of versioned apps (services).
  Docs: It declares all dependencies, completely and exactly, via a dependency declaration manifest.

  {
    "id": 136,
    "created": 12804083940,
    "name": "bubbly-whale",
    "services": {
      "web-app": "quay.io/org/web:d4e21d71",
      "web-server": "quay.io/org/server:3b4d2505",
      "chat-server": "quay.io/org/chat:745f549d",
      "video-transcoder": "quay.io/org/video:85381cba",
      "frontend": "38a4e0d9e64f"
    },
    config: {
      "foo": "bar"
    }
  }

* Config?

  Service config:
    - options for middleware

  Releases for a:
    - 12factor app: (release = build + config)
    - 12factor system: (release = builds + config)

* Variable config

  Different config for backing services:

  - api keys
  - tokens
  - credentials for backing services
  - number of bcrypt rounds

  Variable config for a:
    - 12factor app: env vars
    - 12factor system: env vars or etcd/consul/serf

* Immutability

  - releases are immutable
  - the above release 136 will never change after it is created
  - this eliminates a class of ops errors

* Changing

  - how do you change an immutable release?
  - make a new one based on the existing one and push it to a recorded list of releases

  {
    "id": 137,
    "created": 12804096435,
    "name": "rolling-wake",
    "services": {
      "web-app": "quay.io/org/web:newStuff",
      "web-server": "quay.io/org/server:3b4d2505",
      "chat-server": "quay.io/org/chat:newStuff",
      "video-transcoder": "quay.io/org/video:85381cba"
    },
    config: {
      "foo": "bar",
      "newConfig": "value"
    }
  }

* What does this have to do with deployment though?

  *Deployer* (proof-of-concept in Go)

  [[github.com/jsdir/deployer][github.com/jsdir/deployer]]

* What is it?

  - Small server that maintains and persists that list of releases
    - Stores the releases on disk
  - Has a RESTful api that allows me to create and deploy releases

* How do I use it?

  1. Create and upload your containers
     - this can be done after CI
  2. Create a new release with those new containers
     - (initial and update)
     - returns release id on the last line for shell script magicians
  3. Deploy the release to an environment
     - deploy release id to an environment staging
     - the environment name is also an alias for the release id it current is set to (deploy staging production)

* Environments

  - what are environments? a destination for a release
  - deployer config.json
    #+begin_src json
    {
      "environments": {
        "staging": {
          "type": "kubernetes",
          "manifestGlob": "/k8s/manifest.json",
          "cmd": "kubectl --server=http://localhost:8888"
        }
      }
    }
    #+end_src
  - an environment is a function
    - Deploy: environment(release, envConfig)
  - `deployer deploy 143 staging` calls this as a function

* The kubernetes environment

  + only one for now
  + [[github.com/jsdir/deployer-kubernetes][github.com/jsdir/deployer-kubernetes]]
  + uses Go templates
  + manifests as can access the release (id, name, services, config, ...)
  + an example

* Example manifest template
  #+begin_src json
  {
    "id": "server",
    "kind": "Pod",
    "apiVersion": "v1beta1",
    "desiredState": {
      "manifest": {
        "version": "v1beta1",
        "id": "server",
        "containers": [{
          "name": "web-demo",
          "image": "{{.Services.web}}",
          "cpu": 100,
          "ports": [{
            "name": "http",
            "containerPort": 8091,
            "hostPort": 8091
          }],
          "env": [{
            "name": "PORT",
            "value": "{{.Config.webPort}}"
          }, {
            "name": "CLIENT_BUNDLE",
            "value": "{{.Services.frontend}"
          }, {
            "name": "RELEASE_ID",
            "value": "{{.Id}}"
          }]
        }]
      }
    }
  }
  #+end_src

* Environments are pluggable

  deployer-*

  - it's just a function
  - multiple environments
    #+begin_src json
    {
      "environments": {
        "development": {
          "type": "docker"
        },
        "staging": {
          "type": "kubernetes",
          "manifestGlob": "/k8s/prod.manifest.json",
          "cmd": "kubectl --server=http://prod.cluster.site.io:8888"
        },
        "production": {
          "type": "kubernetes",
          "manifestGlob": "/k8s/staging.manifest.json",
          "cmd": "kubectl --server=http://prod.cluster.site.io:8888"
        }
      }
    }
    #+end_src

* Future?

  - Namespaces
    - Multiple systems under one deployer instance
  - More pluggable environments
  - Better CLI for rollbacks
  - Availability zones
  - Integration with irc, Hubot, Slack, and Flowdock
  - Web frontend? (deployer/docs/api/v1.yml)

  This or a tool like this can allow us to build 12factor systems.

* Thanks! Questions, comments?
  #+begin_src bash
  $ !!
  $ cat userdata/$(whoami).json
  {
    "name": "Jason Sommer",
    "email": "j@jsdir.net",
    "phone": 8325106718,
    "github": "github.com/jsdir",
    "twitter": "@jsdir"
  }
  #+end_src

  Deployer:
    - [[github.com/jsdir/deployer]]
    - [[github.com/jsdir/deployer-kubernetes]]

  This talk:
    - [[github.com/jsdir/talks/blob/master/2015-deployment/deployment.org]]
